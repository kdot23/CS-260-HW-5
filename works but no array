import java.io.PipedInputStream;
import java.util.Arrays;
import java.io.IOException;

public class Checker implements Runnable 
{
	PipedInputStream primeIn, fibIn;
	//private int int1, int2;
	private int count;
	int[] fibArray = new int[PrimeAndFibonacci.t];
	int[] primeArray = new int[PrimeAndFibonacci.t];
	
	int primeReadPos = 0;
	int primeWritePos = 0;
	int primeOccupied = 0;
	int fibReadPos = 0;
	int fibWritePos = 0;
	int fibOccupied = 0;
	
	
	public Checker(PipedInputStream primeIn, PipedInputStream fibIn)
	{
		this.primeIn = primeIn;
		this.fibIn = fibIn;
		this.count = 0;
	}
	
	public void run()
	{
		try{
			if (fibIn.available() == 0 || primeIn.available() == 0)
			{
				try{
				wait();}
				catch (InterruptedException ie)
				{
					ie.printStackTrace();
				}
			}
		int fibNum = fibIn.read(), primeNum = primeIn.read();
		System.out.println(fibNum + ' ' + primeNum);
		while (fibNum != -1 && primeNum != -1)
		{
			while(primeNum <= fibNum)
			{
				if (primeNum == fibNum)
				{
					count++;
				}
				primeNum = primeIn.read();
				if (primeNum == -1)
				{
					System.out.println(count);
					return;
				}
			}
			fibNum = fibIn.read();
			if (fibNum == -1)
			{
				System.out.println(count);
				return;
			}
		}
		
		}
		catch(IOException io){
			io.printStackTrace();
		}
		
	}
}
